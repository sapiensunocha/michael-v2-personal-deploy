import fs from "fs/promises"; import path from "path"; import { fileURLToPath } from "url"; import fetch from "node-fetch"; import dotenv from "dotenv"; dotenv.config(); const __dirname = path.dirname(fileURLToPath(import.meta.url)); async function checkDataFetch() { try { console.log("Simulating src/app/map/page.tsx data fetching..."); let disasterData = []; const filePath = path.resolve(__dirname, "src/data/disasterData.json"); try { const fileContent = await fs.readFile(filePath, "utf8"); disasterData = JSON.parse(fileContent); console.log("disasterData.json loaded:", disasterData.length, "entries"); console.log("Sample entry:", disasterData[0] || "No entries found"); } catch (e) { console.error("Error loading disasterData.json:", e.message); } const apiUrl = process.env.NEXT_PUBLIC_NASA_API_URL || "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.geojson"; try { const res = await fetch(apiUrl); if (!res.ok) throw new Error(`HTTP ${res.status}`); const geojson = await res.json(); const apiData = geojson.features.map(f => ({ id: f.id, latitude: f.geometry.coordinates[1], longitude: f.geometry.coordinates[0], magnitude: f.properties.mag, time: f.properties.time })); console.log("USGS API loaded:", apiData.length, "entries"); console.log("Sample API entry:", apiData[0] || "No entries found"); disasterData = [...disasterData, ...apiData]; } catch (e) { console.error("Error fetching USGS API:", e.message); } if (disasterData.length > 0) { console.log("Total data for Redux (visibleDisasters):", disasterData.length); console.log("Data fetch successful. Check src/components/Map/index.tsx for Redux integration or run npm run dev and inspect browser console."); } else { console.log("ERROR: No data fetched. Map will show no markers. Verify src/app/map/page.tsx data fetching logic."); } } catch (e) { console.error("Unexpected error:", e.message); } } checkDataFetch();
