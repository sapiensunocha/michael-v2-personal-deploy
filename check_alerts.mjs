import fs from "fs/promises"; import path from "path"; import { fileURLToPath } from "url"; import fetch from "node-fetch"; const __dirname = path.dirname(fileURLToPath(import.meta.url)); async function checkAlerts() { try { const filePath = path.resolve(__dirname, "src/data/disasterData.json"); let localData = []; try { localData = JSON.parse(await fs.readFile(filePath, "utf8")); } catch (e) { console.error("Error loading disasterData.json:", e.message); } const apiUrl = process.env.NEXT_PUBLIC_NASA_API_URL || "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.geojson"; let apiData = []; try { const res = await fetch(apiUrl); if (!res.ok) throw new Error(`HTTP ${res.status}`); const geojson = await res.json(); apiData = geojson.features.map(f => ({ latitude: f.geometry.coordinates[1], longitude: f.geometry.coordinates[0], magnitude: f.properties.mag, time: f.properties.time })); } catch (e) { console.error("Error fetching USGS API:", e.message); } const sevenDaysAgo = Date.now() - 7 * 24 * 60 * 60 * 1000; const filteredData = [...localData, ...apiData].filter(d => d.magnitude > 2.5 && d.time >= sevenDaysAgo && d.time <= Date.now() && typeof d.latitude === "number" && !isNaN(d.latitude) && typeof d.longitude === "number" && !isNaN(d.longitude)); console.log("Total alerts (magnitude > 2.5, last 7 days):", filteredData.length); const limitedData = filteredData.slice(0, 10); console.log("Limited to 10 alerts (as in Map/index.tsx):", limitedData.length); if (limitedData.length === 0) console.log("ERROR: No alerts to render after limiting."); else console.log("Sample of limited alerts:", limitedData.slice(0, 2)); } catch (e) { console.error("Unexpected error:", e.message); } } checkAlerts();
