import fs from "fs/promises"; import path from "path"; import { fileURLToPath } from "url"; import fetch from "node-fetch"; const __dirname = path.dirname(fileURLToPath(import.meta.url)); async function checkCoords() { try { const filePath = path.resolve(__dirname, "src/data/disasterData.json"); let localData = []; try { localData = JSON.parse(await fs.readFile(filePath, "utf8")); console.log("disasterData.json entries:", localData.length); } catch (e) { console.error("Error loading disasterData.json:", e.message); } const localProblematic = localData.filter(d => isNaN(d.latitude) || isNaN(d.longitude) || typeof d.latitude !== "number" || typeof d.longitude !== "number"); console.log("Problematic coordinates in disasterData.json:", localProblematic.length, localProblematic); const apiUrl = process.env.NEXT_PUBLIC_NASA_API_URL || "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.geojson"; let apiData = []; try { const res = await fetch(apiUrl); if (!res.ok) throw new Error(`HTTP ${res.status}`); const geojson = await res.json(); apiData = geojson.features.map(f => ({ latitude: f.geometry.coordinates[1], longitude: f.geometry.coordinates[0] })); console.log("USGS API entries:", apiData.length); } catch (e) { console.error("Error fetching USGS API:", e.message); } const apiProblematic = apiData.filter(d => isNaN(d.latitude) || isNaN(d.longitude) || typeof d.latitude !== "number" || typeof d.longitude !== "number"); console.log("Problematic coordinates in USGS API:", apiProblematic.length, apiProblematic); } catch (e) { console.error("Unexpected error:", e.message); } } checkCoords();
